||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| simple driver framework
|| --------------------
{doc-next ||=== DeployCommon
    {purpose Common functionality for deploy operations.}
}
{define-class public DeployCommon {inherits EventTarget, InitRestArgParser}
  field public-get constant caption:String
  field public-get parent:#DeployCommon = null
  {constructor public {default caption:#String = null, ...}
    {self.process-rest-args ...}
    set self.caption = 
        {if-non-null caption
         then caption
         else {String self}}
  }
  {method public {non-keyword-init-arg x:any}:void
    {type-switch x
     case h:EventHandler do
        {self.add-event-handler h}
     else
        {output {lmessage DeployBase ignoring arg {value x}}}}
  }
  {getter public {root}:DeployCommon
    {return 
        {if-non-null parent = self.parent 
         then parent.root
         else self}}
  }
  {method public {log msg:String}:void
    {self.root.handle-event
        {DeployProgress {lmessage [{timestamp}] {value msg}}}}
  }
  {method public {info msg:String}:void
    {self.root.handle-event
        {DeployProgress msg}}
  }
  
}
{doc-next ||=== DeployContext
    {purpose Represent context for deploy operations.}
}
{define-class public DeployContext
  field public source-root:Url
  field public target-root:Url
  field public preview?:bool
  {constructor public {default
                          source-root:Url = {get-working-directory-url},
                          target-root:Url = {get-working-directory-url},
                          preview?:bool = false}
    set self.source-root = source-root
    set self.target-root = target-root
    set self.preview? = preview?
  }
  let public-get constant standard:DeployContext = {DeployContext}
}
{doc-next ||=== DeployBase
    {purpose Common functionality for deploy operations.}
}
{define-class public abstract DeployBase {inherits DeployCommon}
  {constructor public {default ...}
    {construct-super {splice ...}}
  }
  {method public {do-deploy
                     context:DeployContext = DeployContext.standard,
                     recurse-on-preview?:bool = false
                 }:void
    {self.log {lmessage {value self.caption} ...}}
    {if recurse-on-preview? or not context.preview? then
        {try
            {self.deploy context = context}
            {self.log {lmessage {value self.caption} ... Done}}
         catch e:Throwable do
            {self.info {lmessage == ERROR == {value e}}}}}
    {self.info "--"}
  }
  {method public abstract {deploy
                              context:DeployContext = DeployContext.standard
                          }:void
  }
}
{doc-next ||=== DeploySpec
    {purpose Specifies deploy operation for a project.}
}
{define-class public DeploySpec {inherits DeployBase}
  field public-get project:String
  field public-get target:String
  field public-get loc:#String
  field public-get archive?:bool
  {constructor public {default 
                          project:String,
                          target:String,
                          loc:#String,
                          archive?:bool = false,
                          ...}
    set self.project = project
    set self.target = target
    set self.loc = loc
    set self.archive? = archive?
    {construct-super {splice ...}}
  }
  {method public {deploy
                     context:DeployContext = DeployContext.standard
                 }:void
    {deploy-project 
        {context.source-root.merge self.project}, 
        target-name = self.target,
        target-url-name = 
            {if-non-null loc = self.loc then
                {context.target-root.merge loc}.full-filename
             else null},
        || TODO: untangle this
        base = context.target-root.parent-dir.url,
        archive? = self.archive?}
    {self.info
        {lmessage to location
            {if-non-null loc = self.loc then loc else "<default>"}}}
  }
  {method public {object-describe out:TextOutputStream, locale:Locale}:void
    {format out = out, locale = locale, "[%s '%s : %s']",
        {type-of self}, self.project, self.target}
  }
}
{doc-next ||=== DeployContext
    {purpose Specifies deploy operation to copy files.}
}
{define-class public DeployCopy {inherits DeployBase}
  field public-get constant source-path:String
  field public-get constant target-path:String
  field public-get constant from-source?:bool
  {constructor public {default 
                          source-path:String,
                          target-path:String,
                          from-source?:bool = true,
                          ...}
    set self.source-path = source-path
    set self.target-path = target-path
    set self.from-source? = from-source?
    {construct-super {splice ...}}
  }
  {method public {deploy
                     context:DeployContext = DeployContext.standard
                 }:void
    let source-base:Url = 
        {if self.from-source? 
         then context.source-root 
         else context.target-root}
    let source:Url = {source-base.merge self.source-path}
    let target:Url = {context.target-root.merge self.target-path}
    {delete target,
        error-if-missing? = false,
        recurse? = true}
    {copy source, target,
        error-if-exists? = false,
        recurse? = true}  
  }
  {method public {object-describe out:TextOutputStream, locale:Locale}:void
    {format out = out, locale = locale, "[%s '%s -> %s']",
        {type-of self}, self.source-path, self.target-path}
  }
}
{doc-next ||=== DeployAction
    {purpose Sepcifies arbitrary deploy operation.}
}
{define-class public DeployAction {inherits DeployBase}
  field action:{proc-type {DeployAction, Url, Url}:void}
  {constructor public {default 
                          action:{proc-type {DeployAction, Url, Url}:void},
                          ...}
    set self.action = action
    {construct-super {splice ...}}
  }
  {method public {deploy
                     context:DeployContext = DeployContext.standard
                 }:void
    {self.action self, context.source-root, context.target-root}
  }
}
{doc-next ||=== DeploySpecs
    {purpose Specifies composition of deploy operations.}
}
{define-class public DeploySpecs {inherits DeployBase}
  field public-get specs:{Array-of DeployBase}
  {constructor public {default
                          ...}
    set self.specs = {{Array-of DeployBase}}
    {construct-super {splice ...}}
  }
  {method public {non-keyword-init-arg x:any}:void
    {type-switch x
     case x:DeployBase do
        {self.add x}
     else
        {super.non-keyword-init-arg x}}
  }
  {method public {add x:DeployBase}:void
    {self.specs.append x}
    set x.parent = self
  }
  {method public {do-deploy
                     context:DeployContext = DeployContext.standard,
                     recurse-on-preview?:bool = true
                 }:void
    {super.do-deploy
        context = context,
        recurse-on-preview? = recurse-on-preview?}
  }
  {method public {deploy
                     context:DeployContext = DeployContext.standard
                 }:void
    {self.info {lmessage From {value context.source-root}}}
    {self.info {lmessage Into {value context.target-root}}}
    {self.info "--"}
    {for spec in self.specs do
        {with-busy-cursor
            {spec.do-deploy context = context}}}
  }
}
{doc-next ||=== DeployProgress
    {purpose Indicates progress of deploy operations.}
}
{define-class public DeployProgress {inherits Event}
  field public-get message:String
  {constructor public {default message:String}
    set self.message = message
  }
}
|| functions
|| ----------
{doc-next ||=== deploy-project
    {purpose Adapter to deploy specified target of specified project.}
}
{define-proc public {deploy-project
                        project-url:Url,
                        target-name:#String = null,
                        target-url-name:#String = null,
                        api-version:VersionNumber = curl-version-number-2,
                        archive?:bool = false,
                        base:Url = {get-base-url}
                    }:void
    || open the project
    let project:ProjectDescription =
        {ProjectDescription.from-url project-url}
    || override the API version number
    def version-changed? = {api-version.compare-to project.api-version} != 0
    set project.api-version = api-version
    || find the target (first if unspecified)
    let target:#TargetDescription = null
    {for t in project.targets do
        let match?:bool =
            {if-non-null target-name then
                t.name == target-name
             else true}
        {if match? then
            set target = t
            {break}}}
    || override the location, if specified
    || .. unfortunately, project does not store relative paths
    {if-non-null target-url-name then
        set target.target-url-name = target-url-name}
    || deploy it
    {if-non-null target then
        {project.deploy target, occ? = archive?, preflight = "none"}
     else
        {output {message No such target: {value target-name}}}}
    || if version differs from that of project, update deployment accordingly
    {if version-changed? then
        def mloc = {project-url.merge "manifest.mcurl"}
        {replace-version-herald mloc,
            version-string = {String api-version}}
        || TODO: other components
        || - applets
        || - contents of docs directory
    }
}
{define-proc {timestamp}:String
    {return {DateTime}.info.locale-time}
}
{define-proc {subapplet 
                 loc:Url,
                 timeout:Time = 30s
             }:(bool, #String)
    || start waiting
    let timed-out?:bool = false
    {after timeout do
        set timed-out? = true}
    || load the applet
    let data:AppletData = {AppletData null, loc}
    || await completion
    {while data.loading? and not timed-out? do
        {dispatch-events true}}
    || determine status
    let status:#String = 
        {if data.loading? then
            {data.cancel}
            "Timeout"
         elseif data.what == "finished" then
            null
         else
            data.info}        
    || flush applet, so its resources can be reclaimed
    {after 0s do
        {data.suspend}
        {data.destroy}}
    || report results
    {return status != null, status}
}
{doc-next ||=== clean-svn-directories
    {purpose Cleans ".svn" directories from specified base directory.}
}
{define-proc public {clean-svn-directories base:Url}:void
    {walk-directory {base.instantiate-Directory},
        {proc {d:Directory}:bool
            let loc:Url = d.url
            {return
                {if loc.filename == ".svn" then
                    {delete loc, recurse? = true}
                    false
                 else
                    true}}}}
}
{doc-next ||=== walk-directory
    {purpose Applies specified function to directory members.}
    {details Return value indicates whether to walk subdirectories}
}
{define-proc public {walk-directory
                        d:Directory, 
                        f:{proc-type {Directory}:bool}
                    }:void
    let continue?:bool = {f d}
    {if continue? then
        {for x in d do
            {type-switch x
             case d:Directory do
                {walk-directory d, f}}}}
}
{doc-next ||=== replace-version-herald
    {purpose
        Replaces the version number in the {docref curl} herald of a source file.}
    {parameter file,
        the {docref Url} of the file.}
    {parameter version-string,
        the desired version (defaults to {docref curl-version-number-2}).}
    {parameter strict?,
        whether to enforce that the desired version is contained in the version herald.}
    {details
        This is useful when deploying components with multiple versions,
        because pcurl files are version specific.}
    {return-vals
        indicates what action was taken}
}
{define-proc public {replace-version-herald
                        file:Url,
                        version-string:String =
                            {String curl-version-number-2},
                        strict?:bool = false
                    }:ReplaceVersionStatus
    def buf = {read-from file}
    def m = {Matcher |"{curl ([0-9.,+ ]+) \w+}"|}
    {if-non-null state = {m.match buf} then
        def matched = {non-null state[1]}
        {if matched == version-string then
            {return ReplaceVersionStatus.correct-version}}
        def (start, length) = {state.get-range 1}
        {if strict? then
            def index = {buf.find-string version-string, starting-index = start}
            {if index < start or index >= start + length then
                {return ReplaceVersionStatus.incompatible-version}}}
        {buf.remove start, length = length}
        {for c key i in version-string do
            {buf.insert c, start + i}}
        {write-to file, buf}
        {return ReplaceVersionStatus.replaced-version}
     else
        {return ReplaceVersionStatus.no-version}}
}
{doc-next ||=== ReplaceVersionStatus
    {purpose Describes the action taken by {docref replace-version-herald}.}
    {details
        {enumerate
            {item "correct-version":
                the file already contains the specified version.}
            {item "replaced-version":
                the file was modified to contain the specified version.}
            {item "no-version":
                the file does not contain a {docref curl} herald.}
            {item "incompatible-version":
                the version string contained in the file disallows the specified version.}
        }}
}
{define-enum public ReplaceVersionStatus
    correct-version,
    replaced-version,
    no-version,
    incompatible-version
}
{doc-next ||=== replace-version-heralds
    {purpose
        Replaces the version number in the {docref curl} heralds of source files in specified directory.}
    {parameter file,
        the {docref Url} of the directory.}
    {parameter version-string,
        the desired version (defaults to {docref curl-version-number-2}).}
    {parameter strict?,
        whether to enforce that the desired version is contained in the version herald.}
    {details
        This is useful when deploying components with multiple versions,
        because pcurl files are version specific.}
}
{define-proc public {replace-version-heralds
                        directory:Url,
                        version-string:String =
                            {String curl-version-number-2},
                        strict?:bool = false
                    }:void
    {walk-directory {directory.instantiate-Directory},
        {proc {d:Directory}:bool
            {for x key k in d do
                {type-switch x
                 case file:LocalFile do
                    def loc = file.url
                    {switch loc.extension
                     case ".curl", ".mcurl", ".dcurl", ".xcurl" do
                        {replace-version-herald loc,
                            version-string = version-string,
                            strict? = strict?}                        
                    }}}
            {return true}}}
}



