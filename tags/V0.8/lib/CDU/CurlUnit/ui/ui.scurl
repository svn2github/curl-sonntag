||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public ColorScheme {inherits {HashTable-of String, FillPattern}}
  {constructor public {default ...}
    {construct-super {splice ...}}
  }
  {method public {color-for 
                     key:String, 
                     default:FillPattern = FillPattern.transparent
                 }:FillPattern
    let (color:FillPattern, color?:bool) =
        {self.get-if-exists key}
    {return 
        {if color? then color else default}}
  }
}
{define-nonlocal-option public color-scheme:ColorScheme =
    {ColorScheme
||--        "", "gray",
        "unknown", "#E3E3E3",
        "success", "#70D050",
        "failure", "#EB9999",
        "error", "#FFC29E",
        "cancelled", "#C299C2",
        "incomplete", "#99C3C3"
    }
}
|| UI
|| ====================
{doc-next ||=== test-ui
    {purpose Create GUI for specified {docref TestSuite}.}
}
{define-proc public {test-ui 
                        suite:TestSuite,
                        target:TestTarget = TestTarget.current
                    }:Graphic
    || tree
    || ----------
    let tn:TestTreeNode = suite
    let tm:TestTreeModel = {TestTreeModel tn}
    let tc:TestTreeControl =
        {TestTreeControl 
            data-model = tm,
            selection-policy = "multiple",
            tree-item-creation-proc =
                {proc {tn:TreeNode}:TreeItem
                    {return {TestTreeItem tn}}
                }}
    {tc.expand-node tn,
        expand-descendants? = true}
    let n-tests:int = 0
    {tm.walk-nodes
        {proc {tn:TreeNode}:bool
            {type-switch tn.node-data
             case t:TestCase do
                {inc n-tests}}
            {return false}}}
    || counters
    || ----------
    let counter:StateCounter = {StateCounter}
    {target.add-event-handler
        {on e:TestMessage do
            let test:Test = e.report.test
            let result:TestResult = e.report.result
            let state:TestState = e.report.state
            let item:#String =
                {switch state
                 case TestState.running do
                    {switch result
                     case TestResult.unknown do "total"
                     else null}
                 case TestState.complete do result.name
                 else null}
            {if-non-null item then
                || update tree display
                {if-non-null tn = {tm.node-for test} then
                    set tn.kind = result.name}
                || increment counts (only leaves)
                {if not test isa TestSuite then
                    {counter.note-item item}}}
        }}
    || default color scheme
    let scheme:ColorScheme = {Frame}.color-scheme    
    let counter-styling:Arguments =
        {Arguments  width = .5in, halign = "right"}
    let total-display:TextDisplay =
        {TextDisplay {splice counter-styling},
            value = {String n-tests}}
    let total-run-display:TextDisplay =
        {TextDisplay {splice counter-styling},
            {bind value to "total"}}
    let success-display:TextDisplay =
        {TextDisplay 
            background = {scheme.color-for "success"}, 
            {splice counter-styling},
            {bind value to "success"}}
    let failure-display:TextDisplay =
        {TextDisplay 
            background = {scheme.color-for "failure"}, 
            {splice counter-styling},
            {bind value to "failure"}}
    let error-display:TextDisplay =
        {TextDisplay 
            background = {scheme.color-for "error"}, 
            {splice counter-styling},
            {bind value to "error"}}
    let incomplete-display:TextDisplay =
        {TextDisplay 
            background = {scheme.color-for "incomplete"}, 
            {splice counter-styling},
            {bind value to "incomplete"}}
    let cancelled-display:TextDisplay =
        {TextDisplay 
            background = {scheme.color-for "cancelled"}, 
            {splice counter-styling},
            {bind value to "cancelled"}}
    let counters-display:HBox =
        {HBox spacing = 4px, background = "#EEE",
            data-binding-context = counter.data-binding-context,
            total-display,
            total-run-display,
            success-display,
            failure-display,
            error-display,
            incomplete-display,
            cancelled-display}
    || grid
    || ----------
    let rs:#RecordSet = 
        {type-switch target
         case t:RecordSetTestTarget do 
            t.subject
         else null}
    let rg:RecordGrid = 
        {RecordGrid
            record-source = rs,
            width = {add-stretch},
            height = {make-elastic},
            editable? = false,
            display-navigation-panel? = false,
            display-filler-column? = true,
            select-current-record? = true,
            || content
            sort = "id DESC",
||--            sort = "timestamp DESC",
            filter = {RecordData state = "complete"},
            || preserves current-record after bulk changes
            key-spec = "id",
            || presentation
            {RecordGridColumn "id", width = .25in, halign = "right"},
            {RecordGridColumn "result", width = .625in,
                cell-spec = IndicatorStringCell},
            {RecordGridColumn "test", width = 2in,
                cell-spec = NameStringCell},
            {RecordGridColumn "timestamp", width = .875in, halign = "right"},
            {RecordGridColumn "state", width = .625in},
            {RecordGridColumn "message", width = 2.5in},
            {RecordGridColumn "duration", width = .625in, halign = "right"}}
    || form
    || ----------
    let rf:RecordForm = 
        {RecordForm
            record-source = rg.records,
            width = {add-stretch},
            height = {add-stretch},
            display-navigation-panel? = false,
            || TODO: WHY
            sort = "timestamp DESC",
            || content
            {VBox hstretch? = true,
                {HBox spacing = 6px,
                    {Frame margin = 3px,
                        {bind background at f:Frame to "result",
                            {format x:String as
                                {f.color-scheme.color-for x}}},
                        {bind user-data at f:Frame to "result",
                            {format x:String as
                                {f.add replace? = true, x}
                                x}}},
                    {Frame
                        {bind user-data at f:Frame to "test",
                            {format x:String as
                                {f.add replace? = true, x}
                                x}}},
                    {Fill},
                    {Frame
                        {bind user-data at f:Frame to "duration",
                            {format x:#String as
                                {f.add replace? = true, 
                                    {if-non-null x then x else ""}}
                                x}}}},
                {TextArea
                    height = {add-stretch},
                    {bind value to "message"}}
            }}
    {rg.add-event-handler
        {on CurrentRecordChanged at rg:RecordGrid do
            {if rf.current-index != rg.current-index then
                set rf.current-index = rg.current-index}
||--            {dump rg.current-index}
||--            {dump rf.current-index}
        }}
||--    {rf.add-event-handler
||--        {on CurrentRecordChanged at rf:RecordForm do
||--            {output "== CHECK"}
||--            {dump rf.current-index}
||--            {dump rg.current-index}
||--            {if rg.current-index < 0 then
||--                set rg.current-index = rf.current-index}
||--        }}
    || controller
    || ----------
    let controller:TestController =
        {TestController suite}
    let do-tests:{proc-type {}:void} =
        {proc {}:void
            let tests:{Array-of Test} = tc.selected-tests
            {if tests.empty? then
                {controller.execute}
             else
                {controller.execute tests = tests}}
        }
    {tc.add-event-handler
        {on Action do
            {with-busy-cursor
                {do-tests}}}}
    || display
    || ----------
    let display:VBox =
        {VBox
            spacing = 4px, margin = 4px,
            {HBox
                spacing = 6px,
                counters-display,
                {CommandButton label = {lmessage Run},
                    {on Action do
                        {with-busy-cursor
                            {do-tests}
                        }}},
                {CommandButton label = {lmessage Reset},
                    {on Action do
                        {if-non-null rs then
                            {rs.delete-all}}
                        {tc.walk-nodes 
                            {proc {n:TreeNode}:bool
                                {type-switch n
                                 case n:TestTreeNode do
                                    set n.kind = ""}
                                {return false}}}
                        {counter.clear}}},
                {CommandButton label = {lmessage Cancel},
                    {on Action do
                        {controller.cancel}}},
                {Fill}},
            {HPanedBox
                pane-sizes = {DoubleArray 20%, 80%},
                {ScrollBox tc},
                {VPanedBox
                    pane-sizes = {DoubleArray 90%, 10%},
                    rg,
                    rf}}}
    {return display}
}
