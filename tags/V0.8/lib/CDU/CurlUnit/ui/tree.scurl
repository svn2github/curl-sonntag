||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| tree
|| ====================
{define-class public TestTreeNode {inherits ConcreteTreeNode}
  {constructor public {default ...}
    {construct-super {splice ...}}
  }
  {factory public implicit {from-test subject:Test}:TestTreeNode
    {return {TestTreeNode.test-node subject}}
  }
  field _kind:String = ""
  {getter public {kind}:String
    {return self._kind}
  }
  {setter public {kind val:String}:void
    {if val != self._kind then
        set self._kind = val
        || notification
        {if-non-null tm = self.tree-model then
            {tm.note-tree-model-change
                {TreeModelChange node = self,
                    TreeModelChangeType.node-changed}}}
    }
  }
  {getter public {subject}:Test
    {return self.node-data asa Test}
  }
  {define-proc {test-node subject:Test}:TestTreeNode
    let n:TestTreeNode = 
        {TestTreeNode 
            node-data = subject,
            node-label = subject.name}
    {type-switch subject
     case ts:TestSuite do
        {for t in ts do
            {n.append {TestTreeNode.test-node t}}
        }}
    {return n}
  }
}
{define-class public TestTreeModel {inherits TreeModel}
  {constructor public {default root:TestTreeNode, ...}
    {construct-super root = root, {splice ...}}
  }
  {getter public {root}:TestTreeNode
    {return super.root asa TestTreeNode}
  }
  {getter public {subject}:Test
    {return self.root.subject}
  }
  {method public {node-for subject:Test}:#TestTreeNode
    || model and Test structure are isomorphic
    || locate by recursive descent from common ancestor
    let root:TestTreeNode = self.root
    {return
        {if root.subject == subject then
            || subject is the root
            root
         else
            || descend through ancestors
            let ancestors:TestArray = subject.ancestors
            let node:TestTreeNode = root
            {for a key i in ancestors do
                {if i == 0 then
                    || top ancestor: must match root
                    {if a != root.node-data then
                        {return null}}
                 else
                    || subsequent ancestor: find matching child
                    let np:#TestTreeNode = null
                    {for n in node do
                        {type-switch n
                         case n:TestTreeNode do
                            {if n.subject == a then
                                set np = n
                                {break}}}}
                    {if-non-null np then
                        || match: descend and proceed
                        set node = np
                     else
                        || no match
                        {return null}}
                }}
            || entire path matched
            {return node}}
    }
  }
}
{define-class public TestTreeControl {inherits TreeControl}
  {constructor public {default ...}
    {construct-super {splice ...}}
  }
  {getter {selected-tests}:{Array-of Test}
    let tests:{Array-of Test} = {{Array-of Test}}
    let nodes:{Set-of TreeNode} = self.selection.nodes
    {if not nodes.empty? then
        || preserve order
        || NOTES: allows descendants
        {self.walk-nodes 
            {proc {n:TreeNode}:bool
                {if {nodes.member? n} then
                    {type-switch n
                     case n:TestTreeNode do
                        {tests.append n.subject}}}
                {return false}}
        }}
    {return tests}
  }
}
{define-class public TestTreeItem {inherits DefaultTreeItem}
  {constructor public {default ...}
    {construct-super 
        icon = {TestTreeIcon},
        {splice ...}}
  }
  {getter public {test-node}:#TestTreeNode
    {return 
        {type-switch self.node 
         case node:TestTreeNode do node
         else null}}
  } 
  {getter public {subject}:#Test
    {return 
        {type-switch self.node 
         case tn:TestTreeNode do tn.subject
         else null}}
  }  
}
{define-class public TestTreeIcon {inherits DefaultFrameTreeIcon}
  field current?:bool = false
  {method public {refresh}:void
    {if not self.current? then
        {self.create-icon}
        set self.current? = true}
    set self.color = self.icon-color
  }
  {nonlocal-option public font-size:any
    || update when font-size changes
    {self.create-icon}
  }
  {method {create-icon}:void
     let size:Distance = 
        {self.any-to-Distance self.font-size,
            for-font-size? = true,
            convert-font-relative-values? = true} * 0.8
    let small-size:Distance = size * 0.8
    let color:FillPattern = self.icon-color
    let icon:Graphic =        
        {if color != FillPattern.transparent then
            {type-switch self.subject
                || No special shapes
             else
                || standard shape: circle
                {EllipticalArcGraphic
                    horigin = "center",
                    width = small-size,
                    height = small-size}}
         else 
            {Fill width = 0pt}} 
    {self.add replace? = true, icon}
  }
  {getter {icon-color}:FillPattern
    {return
        {if-non-null node = self.test-node then
            let kind:String = node.kind
            let color:FillPattern =
                {self.color-scheme.color-for kind,
                    default = "gray"}
            color
         else FillPattern.transparent}}
  }
  {getter {test-node}:#TestTreeNode
    {return
        {type-switch self.item
         case item:TestTreeItem do item.test-node
         else null}}
  }
  {getter {subject}:#Test
    {return
        {type-switch self.item 
         case item:TestTreeItem do item.subject
         else null}}
  }
}
