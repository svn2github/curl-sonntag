||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| counter worked example
|| --------------------
{define-class public ConcreteEventTarget {inherits EventTarget, InitRestArgParser}
  {constructor public {default ...}
    {self.process-rest-args {splice ...}}
  }
  {method public {non-keyword-init-arg x:any}:void
    {type-switch x
     case h:EventHandler do
        {self.add-event-handler h}
     else {super.non-keyword-init-arg x}}
  }
}
{define-class public abstract SelectorChanged {inherits Event}
  {getter public abstract {selector-as-any}:any}
}
{define-class public {SelectorChanged-of K:Type} {inherits SelectorChanged}
  field public-get constant selector:K
  {constructor public {default selector:K}
    set self.selector = selector
  }
  {getter public {selector-as-any}:any
    {return self.selector}
  }
}
{let public constant PropertyChanged:ClassType =
    {SelectorChanged-of String}
}
{define-class public {DelegatingAssociation-of K:Type, T:Type} 
  {inherits {Association-of K, T}, ConcreteEventTarget}  
  
  field public-get constant subject:{Association-of K, T}
  
  {constructor public {default subject:{Association-of K, T}, ...}
    set self.subject = subject
    {construct-super.ConcreteEventTarget}
    {self.process-rest-args {splice ...}}
  }
  || Association-of protocol
  {method public {get k:String}:T
    {return self.subject[k]}
  }
  {method public {get-if-exists k:K}:(T, bool)
    {return {self.subject.get-if-exists k}}
  }
  {getter public {size}:int
    {return self.subject.size}
  }
  {method public {set k:K, x:T}:void
    let changed?:bool = {self.get-if-exists k} != x
    set self.subject[k] = x
    {if changed? then
        || change notification
        {self.enqueue-event
            {{SelectorChanged-of K} k}}}
  }
  {method public {remove k:K, length:int = 1, error-if-missing?:bool = true}:void
    let changed?:bool = {self.key-exists? k}
    {self.subject.remove k, length = length, error-if-missing? = error-if-missing?}
    {if changed? then
        || change notification
        {self.enqueue-event
            {{SelectorChanged-of K} k}}}
  }
  {method public {to-Iterator}:{Iterator-of T}
    {return {self.subject.to-Iterator}}
  }
  {method public {keys-to-Iterator}:{Iterator-of K}
    {return {self.subject.keys-to-Iterator}}
  }
  || NOTE: doesn't make sense to clone, but part of protocol
  {method public {clone}:{DelegatingAssociation-of K, T}
    {return 
        {{DelegatingAssociation-of K, T} 
            {self.subject.clone}}}
  }
}
{define-class public {AssocationDataBindingContext-of K:Type, T:Type}
  {inherits DataBindingContext}
  field public-get constant subject:{DelegatingAssociation-of K, T}
  {constructor public {default
                          subject:{DelegatingAssociation-of K, T}}
    set self.subject = subject
    {construct-super.DataBindingContext}
    || TODO: add weakly
    {self.subject.add-event-handler
        {on e:SelectorChanged do
            {for b in {self.bindings-for e.selector-as-any} do
                {b.refresh}}}}
  }
  || DataBinding protocol
  {method public {get-data selector:any}:(any, bool)
    let (val:any, found?:bool) =
        {self.subject.get-if-exists selector asa String}
    {return val, found?}
  }
  || implementation
  {method public {bindings-for selector:any}:{Set-of DataBinding}
    {return
        {self.registered-bindings.filter-clone 
            {proc {b:DataBinding}:bool
                {return b.data-selector == selector}}}}
  }
}
{let public constant CounterDataBindingContext:ClassType =
    {AssocationDataBindingContext-of String, int}
}
{define-class public StateCounter {inherits {DelegatingAssociation-of String, int}}
  field _data-binding-context:#DataBindingContext
  {getter public {data-binding-context}:DataBindingContext
    {if self._data-binding-context == null then
        set self._data-binding-context =
            {CounterDataBindingContext self}}
    {return {non-null self._data-binding-context}}
  }
  {constructor public {default ...}
    {construct-super 
        {{HashTable-of String, int}},
        {splice ...}}
  }
  {method public {note-item k:String}:void
    let (n:int, n?:bool) = {self.get-if-exists k}
    {if n? then
        {inc self[k]}
     else
        set self[k] = 1}
  }
}
