||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| extensions
|| ====================

|| inline tests
|| --------------------
{doc-next ||=== SimpleTestCase
    {purpose Represents {docref TestCase} specified by action proc.}
}
{define-class public SimpleTestCase {inherits TestCase}
  field constant action:{proc-type {}:void}
  {constructor public {default
                          name:String,
                          action:{proc-type {}:void},
                          ...}
    set self.action = action
    {construct-super name, {splice ...}}
  }
  {method public {run}:void
    {self.action}
  }
}
{doc-next ||=== test-case
    {purpose Specifies a {docref SimpleTestCase}.}
}
{define-macro public {test-case ?name:expression, ?body:statements}
    {return
        {expand-template
            {SimpleTestCase ?name,
                {proc {}:void
                    ?body}}
        }}
}
{doc-next ||=== require-exception
    {purpose Signal a test failure, unless the specified exception is thrown.}
}
{define-macro public {require-exception ?exception:identifier do ?body:statements}
    {return
        {expand-template
            {try 
                ?body
                {TestCondition.fail message =
                    {message Expected exception {value ?exception}}}
             catch e:?exception do}
        }}
}
{doc-next ||=== package-version-test-case
    {purpose A {docref TestCase} that reports version of the specified package.}
}
{define-proc public {package-version-test-case 
                        package-name:String, 
                        manifest:ComponentManifest = 
                            {get-current-manifest},
                        caption:#String = null
                    }:SimpleTestCase
    {return
        {SimpleTestCase {if-non-null caption then caption else package-name},
            {proc {}:void
                let p:Package =
                    {import-package manifest = manifest,
                        {make-package-selector package-name}}
                let v:#VersionNumber = p.meta-data.version
                {TestCondition.succeed message =
                    {message package {value p.name} version {String v}}}}}
    }
}

|| evaluation tests
|| --------------------
{doc-next ||=== AppletTestCase
    {purpose A {docref TestCase} that succeeds if the specified applet loads without failure.}
}
{define-class public AppletTestCase {inherits TestCase}
  field public-get constant applet-url:Url
  field applet-data:#AppletData
  field public timeout:Time= 30s
  field public-get timed-out?:bool = false
  {constructor public {default 
                          location:Url, 
                          timeout:Time= 30s,
                          name:String = location.filename & location.query}    
    set self.applet-url = location
    set self.timeout = timeout
    {construct-super name}
  }
  {method public {set-up}:void
    || ensure the applet url is resolvable
    {self.applet-url.resolve}
  }
  {method public {run}:void
    {try
        || timer mechanism for causing a timeout
        set self.timed-out? = false
        {after self.timeout do
            set self.timed-out? = true
        }
        || load the data
        set self.applet-data = {AppletData null, self.applet-url}
        {if-non-null data = self.applet-data then
            || await completion (synchronous)
            {while data.loading? and not self.timed-out? do
                {dispatch-events true}
            }
            || Check for status here
            {if data.loading? then
                || failed to load applet
                {data.cancel}
                {TestCondition.fail message = {lmessage Timeout}}
             elseif data.what == "finished" then
                || successful load of the applet
                {TestCondition.succeed message = {lmessage loaded {value self.applet-url}}}
             else
                || some other failed status
                {TestCondition.fail message = data.info}
            }
        }
     finally
        || flush applet, so its resources can be reclaimed
        {if-non-null data = self.applet-data then
            {data.suspend}
            {data.destroy}
        }
    }
  }
}
{doc-next ||=== PackageTestCase
    {purpose A {docref TestCase} the succeeds if the specified package imports without failure.}
}
{define-class public PackageTestCase {inherits TestCase}
  field public-get constant package-name:String
  field public-get constant manifest:ComponentManifest
  {constructor public {default 
                          package-name:String,
                          name:String = package-name,
                          manifest:ComponentManifest = {get-current-manifest}}
    set self.package-name = package-name
    set self.manifest = manifest
    {construct-super name}
  }
  {method public {run}:void
    let package:Package =
        {import-package 
            {make-package-selector self.package-name}, 
            manifest = self.manifest}
    || meta-data for the version, if any
    let version:String =
        {if-non-null mv = package.meta-data.version then
            {String mv}
         else "?"}
    {TestCondition.succeed message = 
        {lmessage imported {value package.name} version: {value version}}}
  }
}
{doc-next ||=== ManifestTestSuite
    {purpose A {docref TestCase} that succeeds if the packages directly contained 
        in the specified manifest import without failure.}
}
{define-class public ManifestTestSuite {inherits TestSuite}
  field public-get constant manifest:ComponentManifest
  {constructor public {default 
                          manifest:ComponentManifest,
                          name:String = {non-null manifest.name}}
    set self.manifest = manifest
    {construct-super name}
    {self.generate-tests}
  }
  {factory public {from-name 
                      name:String,
                      manifest:ComponentManifest = {get-current-manifest}
                  }:ManifestTestSuite
    {for d in manifest.all-delegates do
        {if d.name == name then
            {if-non-null loc = d.source-url then
                {return
                    {ManifestTestSuite 
                        {import-manifest loc}}}}}}
    {error {lmessage No such manifest: {value name}}}
  }
  {method {generate-tests}:void
    {for c in self.manifest do
        {type-switch c
         case c:ComponentSelector do
            {switch c.component-type
             case "package" do
                {if-non-null package-name = c.name then
                    {self.add 
                        {PackageTestCase package-name,
                            manifest = self.manifest}}
                }}
        }}
  }
}

|| reflective test suite
|| --------------------
{doc-next ||=== TestClassSuite
    {purpose A {docref TestSuite} derived from "test-" methods of the specified class.}
}
{define-class public TestClassSuite {inherits TestSuite}
  field public-get constant type:ClassType
  field test-object:TestCase
  field test-args:Arguments
  {constructor public {default 
                          type:ClassType,
                          name:String = type.name,
                          ...}
    set self.type = type
    set self.test-args = {Arguments {splice ...}}
    {if self.test-args.size == 0 then
        {self.test-args.append name}}
    set self.test-object = {uninitialized-value-for-type TestCase} 
    {construct-super name}
    {self.generate-tests}
  }
  {method {generate-tests}:void
    {for m in {self.type.get-members filter = ClassMember.method-filter} do
        {type-switch m
         case m:Method do
            {if {m.name.prefix? "test-"} then
                let p:ProcType = m.type asa ProcType
                {if p.positional-args.size == 0 then
                    {self.add
                        {SimpleTestCase m.name,
                            {proc {}:void
                                {m.invoke self.test-object}}
                        }}
                 else
                    {self.add
                        {SimpleTestCase  m.name,
                            {proc {}:void
                                {TestCondition.fail message =
                                    {lmessage Unexpected positional arguments}}
                            }}}}
            }}}
  }
  {method public {set-up}:void
    {with-compiler-directives 
        allow-implicit-any-casts? = true,
        allow-any-calls? = true 
     do
        let test:TestCase =
            {new self.type,
                {splice self.test-args}}
        {test.set-up}
        set self.test-object = test}
  }
  {method public {tear-down}:void
    {self.test-object.tear-down}
    set self.test-object = {uninitialized-value-for-type TestCase} 
  }
}

|| guard tests
|| --------------------
{doc-next ||=== package-available?
    {purpose Indicates whether the specified package is available.}
}
{define-proc public {package-available?
                        package-name:String,
                        manifest:ComponentManifest = {get-default-manifest}
                    }:bool
    {return
        {try
            {import-package
                {make-package-selector package-name},
                manifest = manifest}
            true
         catch e:ComponentLocationException do
            false}
    }
}

|| connection preconditions
|| --------------------
{doc-next ||=== test-host-accessible
    {purpose Signal a test failure if the specified internet host is unavailable.}
}
{define-proc public {test-host-accessible host:String}:TestCase
    {return
        {SimpleTestCase host,
            {proc {}:void
                {TestCondition.assert message = {lmessage Cannot connect},
                    {host-available? host}}
            }}
    }
}
{doc-next ||=== test-host-accessible-guard
    {purpose Signal a test incomplete if the specified internet host is unavailable.}
}
{define-proc public {test-host-accessible-guard host:String}:TestCase
    {return
        {SimpleTestCase host,
            {proc {}:void
                {if not {host-available? host} then
                    {TestCondition.terminate message = {lmessage host unavailable: {value host}}}}
            }}
    }
}
{doc-next ||=== host-available?
    {purpose Indicates whether the specified internet host is available.}
}
{define-proc public {host-available? 
                        address:String, 
                        timeout:Time = 5s
                    }:bool
    def parts = {address.split split-chars = ":"}
    def (remote-address, remote-port) =
        {switch parts.size
         case 1 do
            (address, 80)
         case 2 do
            def port = {parts[1].to-int}
            (parts[0], port)
         else {error {lmessage Malformed address: '{value address}'}}}
    {return
        {try
            || attempt connection
            let socket:DataTCPSocket =
                {DataTCPSocket 
                    remote-address = {SocketInetAddress remote-address},
                    remote-port = remote-port asa uint16,
                    timeout = timeout}
            {socket.start-connect}
            {socket.finish-connect}
            {socket.close}
            true
         catch e:SocketException do
            false}}
}

|| dguide tests
|| --------------------
{define-proc public {dguide-test-suite
                        contents-loc:Url,
                        title:String = {lmessage dguide pages}
                    }:TestSuite
    || get files from dguide TOC
    def locs = {guide-content-files contents-loc}

    || generate suite
    def suite = 
        {TestSuite title,
            || "guard" test first
            {SimpleTestCase "IDE precondition",
                {fn =>
                    {if not {package-available? "CURL.IDE.DOCUMENTATION"} then
                        {TestCondition.terminate message = "IDE unavailable"}}}
            }
        }
    {for loc in locs do
        def name = 
            {if loc.query.empty? 
             then loc.filename
             else loc.query}
        {suite.add 
            {AppletTestCase loc, 
                name = name}}
    }
    {return suite}
}
